[__main__]

[django]
debug = False
template_debug = False

# People who get code error notifications.
# In the format Full Name email@example.com Full Name anotheremail@example.com
# XXX - tuple to fix
#admins = 

# Local time zone for this installation. All choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name although not all
# systems may support all possibilities. When USE_TZ is True this is
# interpreted as the default user time zone.
time_zone = America/Chicago

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
language_code = en-us

# If you set this to False Django will make some optimizations so as not
# to load the internationalization machinery.
use_i18n = True

# If you set this to True Django will format dates numbers and calendars
# according to user current locale.
use_l10n = False

# Database connection info.
# XXX - dict to fix
#databases = {
#    default: {
#        engine: django.db.backends.dummy
#    }
#}

# Classes used to implement DB routing behavior.
database_routers = 

# List of strings representing installed apps.
installed_apps = 

# List of locations of the template source files in search order.
template_dirs = 

# List of callables that know how to import templates from various sources.
# See the comments in django/core/template/loader.py for interface
# documentation.
template_loaders = 
    django.template.loaders.filesystem.Loader
    django.template.loaders.app_directories.Loader


# List of processors used by RequestContext to populate the context.
# Each one should be a callable that takes the request object as its
# only parameter and returns a dictionary to add to the context.
template_context_processors = 
    django.contrib.auth.context_processors.auth
    django.core.context_processors.debug
    django.core.context_processors.i18n
    django.core.context_processors.media
    django.core.context_processors.static
    django.core.context_processors.tz
    django.core.context_processors.request
    django.contrib.messages.context_processors.messages

secret_key = 

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: /home/media/media.lawrence.com/media/
media_root = 

# URL that handles the media served from MEDIA_ROOT.
# Example: http://media.lawrence.com/media/
media_url = 

# Absolute path to the directory that holds static files.
# Example: /home/media/media.lawrence.com/static/
static_root = 

# URL that handles the static files served from STATIC_ROOT.
# Example: http://media.lawrence.com/static/
static_url = 


##############
# MIDDLEWARE #
##############

# List of middleware classes to use.  Order is important; in the request phase
# this middleware classes will be applied in the order given and in the
# response phase the middleware will be applied in reverse order.
middleware_classes = 
    django.middleware.common.CommonMiddleware
    django.contrib.sessions.middleware.SessionMiddleware
    django.middleware.csrf.CsrfViewMiddleware
    django.contrib.auth.middleware.AuthenticationMiddleware
    django.contrib.messages.middleware.MessageMiddleware
#     django.middleware.http.ConditionalGetMiddleware
#     django.middleware.gzip.GZipMiddleware


##################
# AUTHENTICATION #
##################

authentication_backends = django.contrib.auth.backends.ModelBackend

login_url = /accounts/login/

logout_url = /accounts/logout/

login_redirect_url = /accounts/profile/


###########
# LOGGING #
###########

# The callable to use to configure logging
logging_config = django.utils.log.dictConfig

# The default logging configuration. This sends an email to
# the site admins on every HTTP 500 error. All other log
# records are sent to the bit bucket.

# XXX - fix me
#logging = {
#    version: 1
#    disable_existing_loggers: False
#    filters: {
#        require_debug_false: {
#            : django.utils.log.RequireDebugFalse
#        }
#    }
#    handlers: {
#        mail_admins: {
#            level: ERROR
#            filters: [require_debug_false]
#            class: django.utils.log.AdminEmailHandler
#        }
#    }
#    loggers: {
#        django.request: {
#            handlers: [mail_admins]
#            level: ERROR
#            propagate: True
#        }
#    }
#}

# Default exception reporter filter class used in case none has been
# specifically assigned to the HttpRequest instance.
default_exception_reporter_filter = django.views.debug.SafeExceptionReporterFilter

###########
# TESTING #
###########

# The name of the class to use to run the test suite
test_runner = django.test.simple.DjangoTestSuiteRunner

############
# FIXTURES #
############

# The list of directories to search for fixtures
fixture_dirs = 

###############
# STATICFILES #
###############

# A list of locations of additional static files
staticfiles_dirs = 

# The default file storage backend used during the build process
staticfiles_storage = django.contrib.staticfiles.storage.StaticFilesStorage

# List of finder classes that know how to find static files in
# various locations.
staticfiles_finders = 
    django.contrib.staticfiles.finders.FileSystemFinder
    django.contrib.staticfiles.finders.AppDirectoriesFinder
#    django.contrib.staticfiles.finders.DefaultStorageFinder


############
# MESSAGES #
############

# Class to use as messages backend
message_storage = django.contrib.messages.storage.fallback.FallbackStorage

# Default values of MESSAGE_LEVEL and MESSAGE_TAGS are defined within
# django.contrib.messages to avoid imports in this settings file.